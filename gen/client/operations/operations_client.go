// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEmployee(params *DeleteEmployeeParams) (*DeleteEmployeeNoContent, error)

	GetEmployeeByID(params *GetEmployeeByIDParams) (*GetEmployeeByIDOK, error)

	ListEmployees(params *ListEmployeesParams) (*ListEmployeesOK, error)

	SaveEmployee(params *SaveEmployeeParams) (*SaveEmployeeCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteEmployee delete employee with id provided in url
*/
func (a *Client) DeleteEmployee(params *DeleteEmployeeParams) (*DeleteEmployeeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmployeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteEmployee",
		Method:             "DELETE",
		PathPattern:        "/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmployeeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetEmployeeByID get employee with id provided in url
*/
func (a *Client) GetEmployeeByID(params *GetEmployeeByIDParams) (*GetEmployeeByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetEmployeeByID",
		Method:             "GET",
		PathPattern:        "/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmployeeByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEmployeeByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEmployees get all the employees
*/
func (a *Client) ListEmployees(params *ListEmployeesParams) (*ListEmployeesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmployeesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListEmployees",
		Method:             "GET",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEmployeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEmployeesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListEmployees: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SaveEmployee save employee API
*/
func (a *Client) SaveEmployee(params *SaveEmployeeParams) (*SaveEmployeeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveEmployeeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "saveEmployee",
		Method:             "POST",
		PathPattern:        "/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveEmployeeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for saveEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
